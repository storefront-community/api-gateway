// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Storefront.ApiGateway.Models.DataModel;

namespace Storefront.ApiGateway.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20190725144006_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(80);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(80);

                    b.HasKey("Id", "TenantId")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("ix_role_name");

                    b.HasIndex("TenantId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasMaxLength(255);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasMaxLength(255);

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id", "TenantId")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId", "TenantId");

                    b.ToTable("role_claim");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(80);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnName("normalized_email")
                        .HasMaxLength(80);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasMaxLength(1024);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(20);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasMaxLength(50);

                    b.HasKey("Id", "TenantId")
                        .HasName("pk_user");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasName("ix_email");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("ix_user_name");

                    b.HasIndex("TenantId")
                        .HasName("ix_tenant_id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasMaxLength(255);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasMaxLength(255);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id", "TenantId")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId", "TenantId");

                    b.ToTable("user_claim");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasMaxLength(128);

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasMaxLength(128);

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey", "TenantId")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId", "TenantId");

                    b.ToTable("user_login");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "RoleId", "TenantId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId", "TenantId");

                    b.HasIndex("UserId", "TenantId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(80);

                    b.Property<long>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasMaxLength(1024);

                    b.HasKey("UserId", "LoginProvider", "Name", "TenantId")
                        .HasName("pk_user_token");

                    b.HasIndex("UserId", "TenantId");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Tenants.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("BillingEmail")
                        .IsRequired()
                        .HasColumnName("billing_email")
                        .HasMaxLength(80);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnName("business_name")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("tenant");
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRole", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Tenants.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_role__tenant")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId", "TenantId")
                        .HasConstraintName("fk_role_claim__role")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Tenants.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_user__tenant")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId", "TenantId")
                        .HasConstraintName("fk_user_claim__user")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId", "TenantId")
                        .HasConstraintName("fk_user_login__user")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId", "TenantId")
                        .HasConstraintName("fk_user_role__role")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId", "TenantId")
                        .HasConstraintName("fk_user_role__user")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Storefront.ApiGateway.Models.DataModel.Identity.ApplicationUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId", "TenantId")
                        .HasConstraintName("fk_user_token__user")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
